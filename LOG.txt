https://git.heroku.com/morning-sea-25305.git : git remote add heroku [git_link]
// >>>> means that add a remote git repo and call the branch heroku..
// >>>> then push your project repo to heroku
https://morning-sea-25305.herokuapp.com/ 

morning-sea-25305

>> heroku logs show the changes on heroku

>>>> We'll use the OAuth authentication standard
>>>> Helper library that helps in the OAuth process ==> Passport.js

>>>> Create a profile with google and enaable G+ API for the Oauth feature
>>>> Generate Client ID and Password : 
//identifies our application with google and can be shared

>>>> When we setup our Oauth flow, we can't redirect users to random pages, and hence,
     callback page must be recorded with google dev console account

>>>> We are using the remotely hosted instance of MongoDB, called (MongoDB Atlas)
     as opposed to the version running in the local device ----> mLab (now under MongoDB)

>>>> Express is the Flask for Node

----------------------------------------end of log 1---------------------------------------

>>>> We now install mongoose that is used to represent the MongoDB 
     "collection" as an "object" in JS env 
>>>> To save the created insstancce in the collection called users, in our mongoDB Atlas account,
     load mongo model by mongoose.model("colectionName")
     we connect to it, and in the passport strategy, use the profile, done para's to extract userInfo 
     from passport auth, and compare/add to db, to validate/add user to the db.
>>>> After updating the DB, we define serialize and deserialize functions, 
     to mention how to scramble/unscramble the unique info to be passed/read from browser for session details
>>>> We tell passport to use cookies to handle these tokens, defined by serialize and deserialize,
     use "npm install --save cookie-session"
>>>> Passport now knows how to serialize/deserialize tokens/cookies, hence "middlewares" are used 
     to wrap up requests before they reach our server main logic, like a preprocesing for every 
     request
     >>>> the middlewares are wired up using "Express_app.use(<Middleware Instance>)" 
>>>> The "express-session" module, helps you store as much data in your cookie as possible, by keeping 
     the required session data in the mongoDB server. Whereas "cookie-session" has limit of like 4kb
>>>> React uses Webpack and Babel, create-react-app is used to make a second server,
     and to run both servers simultaneously, we use "concurrently" module
>>>> Adding proxy property to package of client server to redirect /auth/google to localhost:5000.
     A different port counts as a different domain, and any request to a different port ,
     browser would not include the cookies by default, as it'd assume malicious js content
>>>> When we proxy a request from create-react-app to the node/express API
>>>> We now refactor the promises wala procedure, and replace that with the 'fetch' function
     We write a function to retreive a blob of JSON
>>>> React Dev Tools addds a React tab to inspect element which is a great way 
     to interact with react app components
>>>> "npm install --save react-redux redux react-router-dom" 
     -->  react-router-dom > {BrowseRouter,Router} -->react routing
     react-redux is the glue b/w react and redux -> react-redux > {Provider}
     react > {combineReducers, createStore,applyMiddleware}
>>>> Webpack is a "module loader", we use that for.We can also load up loaders, 
     into webpack, that helps us specify how to handle files other than js files
     Instead of using CDN, we use webpack and css for styling 
>>>> 'axios' responsible for making AJAX requests to backend API, also called an action creator.
     'thunk' responsible for making dispatch functions to store and 
     needs to be passed as a Middleware
>>>> Class based component has life cycle methods that can be used to call action creator, for <App>
---------------------------------------------------------------------------------------------------
>>>> Adding Stripe plugin for front end form and its interaction with the Stripe API..
     Library name : react-stripe-checkout
     frontend needs the publishable key of stripe, and the bckend needs both the publishable and secret keys
>>>> REACT_ENV_name
     https://github.com/azmenak/react-stripe-checkout/blob/master/package.jsons
     test card number 4242 4242 4242 4242 junk@email.com 
     card:
        address_city: null
        address_country: null
        address_line1: null
        address_line1_check: null
        address_line2: null
        address_state: null
        address_zip: null
        address_zip_check: null
        brand: "Visa"
        country: "US"
        cvc_check: "pass"
        dynamic_last4: null
        exp_month: 12
        exp_year: 2022
        funding: "credit"
        id: "card_1G2MLGBDYKSTeUmPhVpMyGCy"
        last4: "4242"
        metadata: {}
        name: "svdvhjvg@jhd.com"
        object: "card"
        tokenization_method: null
        __proto__: Object
        client_ip: "223.182.179.25"
        created: 1579373299
        email: "svdvhjvg@jhd.com"
        id: "tok_1G2MLHBDYKSTeUmPE61Q7x9Z"
        livemode: false
        object: "token"
        type: "card"
        used: false
        __proto__: Object
>>>> 
â€‹